#define TINY_GSM_MODEM_SIM800

#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <TinyGsmClient.h>
#include <PubSubClient.h>
#include <HttpClient.h>
#include <MPU6500_WE.h>
#include <Wire.h>
#include <math.h>
#include <SPI.h>
#include <SD.h>
#include <MAX3010x.h>
#include "filters.h"

#define MPU6500_ADDR    0x69
// #define MAG_ADDRESS         0x0C
// #define ACCEL_XOUT_H        0x3B
// #define ACCEL_YOUT_H        0x3D
// #define ACCEL_ZOUT_H        0x3F
// #define MAG_XOUT_L          0x03
// #define MAG_XOUT_H          0x04
// #define MAG_YOUT_L          0x05
// #define MAG_YOUT_H          0x06
// #define MAG_ZOUT_L          0x07
// #define MAG_ZOUT_H          0x08

File myFile;
MAX30102 sensor;
SoftwareSerial gpsSerial(1, 0);
TinyGPSPlus gps;
SoftwareSerial SerialAT(16, 17);
MPU6500_WE myMPU6500 = MPU6500_WE(MPU6500_ADDR);

float accX, accY, accZ;
float magX, magY, magZ;
float roll, pitch, yaw;

const int _MISO = 4;
const int _MOSI = 7;
const int _CS = 5;
const int _SCK = 6;

const auto kSamplingRate = sensor.SAMPLING_RATE_400SPS;
const float kSamplingFrequency = 400.0;
const unsigned long kFingerThreshold = 10000;
const unsigned int kFingerCooldownMs = 500;
const float  kEdgeThreshold = -2000.0;
const float kLowPassCutoff = 5.0;
const float kHighPassCutoff = 0.5;
const bool kEnableAveraging = false;
const int kAveragingSamples = 5;
const int kSampleThreshold = 5;

const char apn[] = "www";
const char user[] = "";
const char pass[] = "";
const int buttonPin = 22;
const char *broker = "";
const char *topic = "";
int buttonState = 0;
unsigned long lastFileWriteTime = 0;
const char server[] = "";
const int port = ;
const char resource[] = "/test";
const int redPin = 10; 
const int greenPin = 11; 
const int bluePin = 12; 
int fallCount = 0;
//int count = 0;

TinyGsm modem(SerialAT);
TinyGsmClient client(modem);
PubSubClient mqtt(client);
HttpClient http(client, server, port);

void setup() {

  pinMode(25, OUTPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(buttonPin, INPUT);
  //digitalWrite(3,HIGH);
  digitalWrite(25, HIGH);
  Serial.begin(9600);
  while(!Serial);
  gpsSerial.begin(9600);
  SerialAT.begin(9600);
  Wire.setSDA(20);
  Wire.setSCL(21);
  Wire.begin();
  // if(!myMPU6500.init()){
  //   Serial.println("MPU6500 does not respond");
  // }-
  // else{
  //   Serial.println("MPU6500 is connected");
  // }
  // Serial.println("Position your MPU6500 flat and don't move it - calibrating...");
  // delay(1000);

  // Serial.println("Done!");
  
  // myMPU6500.enableGyrDLPF();
  // myMPU6500.setGyrDLPF(MPU6500_DLPF_6);
  // myMPU6500.setSampleRateDivider(5);
  // myMPU6500.setGyrRange(MPU6500_GYRO_RANGE_250);
  // myMPU6500.setAccRange(MPU6500_ACC_RANGE_2G);
  // myMPU6500.enableAccDLPF(true);
  // myMPU6500.setAccDLPF(MPU6500_DLPF_6);

  //initMPU9250();
  while (!Serial);
  //digitalWrite(led1, LOW);
  //delay(1000);
  displayColor(255, 0, 0);  //blue


  SPI.setSCK(_SCK);
  SPI.setRX(_MISO);
  SPI.setTX(_MOSI);
  SPI.setCS(_CS);

  if (!SD.begin(_CS)) {
    Serial.println("SD card initialization failed!");
    while (true);
  } Serial.println("SD card initialization Done");

  myFile = SD.open("gps_log.csv" , FILE_WRITE);

  if(!myMPU6500.init()){
    Serial.println("MPU6500 does not respond");
  }
  else{
    Serial.println("MPU6500 is connected");
  }
  
  Serial.println("Position your MPU6500 flat and don't move it - calibrating...");
  delay(1000);
  myMPU6500.autoOffsets();
  Serial.println("Done!");
  
  myMPU6500.enableGyrDLPF();
  myMPU6500.setGyrDLPF(MPU6500_DLPF_6);
  myMPU6500.setSampleRateDivider(5);
  myMPU6500.setGyrRange(MPU6500_GYRO_RANGE_250);
  myMPU6500.setAccRange(MPU6500_ACC_RANGE_2G);
  myMPU6500.enableAccDLPF(true);
  myMPU6500.setAccDLPF(MPU6500_DLPF_6);

  if(sensor.begin() && sensor.setSamplingRate(kSamplingRate)) {
    Serial.println("Sensor initialiazed");
  }
  else {
    Serial.println("Sensor not found");
    while(1);
  }

  initializeModem();

  connectToMQTTBroker();
}

LowPassFilter low_pass_filter_red(kLowPassCutoff, kSamplingFrequency);
LowPassFilter low_pass_filter_ir(kLowPassCutoff, kSamplingFrequency);
HighPassFilter high_pass_filter(kHighPassCutoff, kSamplingFrequency);
Differentiator differentiator(kSamplingFrequency);
MovingAverageFilter<kAveragingSamples> averager_bpm;
MovingAverageFilter<kAveragingSamples> averager_r;
MovingAverageFilter<kAveragingSamples> averager_spo2;

MinMaxAvgStatistic stat_red;
MinMaxAvgStatistic stat_ir;

float kSpO2_A = 1.5958422;
float kSpO2_B = -34.6596622;
float kSpO2_C = 112.6898759;

long last_heartbeat = 0;

long finger_timestamp = 0;
bool finger_detected = false;

float last_diff = NAN;
bool crossed = false;
long crossed_time = 0;

void loop() {
  
  auto sample = sensor.readSample(1000);
  float current_value_red = sample.red;
  float current_value_ir = sample.ir;
  static unsigned long lastFallTime = 0;
  static float prevRoll = 0; 
  xyzFloat gValue = myMPU6500.getGValues();
  xyzFloat gyr = myMPU6500.getGyrValues();
  float temp = myMPU6500.getTemperature() + 7;
  float resultantG = myMPU6500.getResultantG(gValue);
  float roll = atan2(gValue.y, gValue.z) * RAD_TO_DEG;
  float pitch = atan2(-gValue.x, sqrt(gValue.y * gValue.y + gValue.z * gValue.z)) * RAD_TO_DEG;
  float dt = 1.0 / 1000.0; 
  static float yaw = 0;
  yaw += gyr.z * dt; 
  float at = sqrt(gValue.x*gValue.x + gValue.y*gValue.y + gValue.z*gValue.z);
  

  // Serial.println("Acceleration in g (x,y,z):");
  // Serial.print(gValue.x);
  // Serial.print("   ");
  // Serial.print(gValue.y);
  // Serial.print("   ");
  // Serial.println(gValue.z);
  // Serial.print("Square root of total acceleration: ");
  // Serial.println(at);
  // Serial.print("Resultant g: ");
  // Serial.println(resultantG);

  // Serial.println("Gyroscope data in degrees/s: ");
  // Serial.print(gyr.x);
  // Serial.print("   ");
  // Serial.print(gyr.y);
  // Serial.print("   ");
  // Serial.println(gyr.z);

  // Serial.print("Temperature in Â°C: ");
  // Serial.println(temp + 5); // Adding 5 as an example adjustment

  // Serial.print("Roll: ");
  // Serial.print(roll);
  // Serial.print(" Pitch: ");
  // Serial.print(pitch);
  // Serial.print(" Yaw: ");
  // Serial.println(yaw);

  // Serial.println("********************************************");


      //   readAccelData();
      // readMagData();




  if(sample.red > kFingerThreshold) {
    if(millis() - finger_timestamp > kFingerCooldownMs) {
      finger_detected = true;
    }
  }
  else {

    differentiator.reset();
    averager_bpm.reset();
    averager_r.reset();
    averager_spo2.reset();
    low_pass_filter_red.reset();
    low_pass_filter_ir.reset();
    high_pass_filter.reset();
    stat_red.reset();
    stat_ir.reset();
    
    finger_detected = false;
    finger_timestamp = millis();
  }

  // if(finger_detected) {
    current_value_red = low_pass_filter_red.process(current_value_red);
    current_value_ir = low_pass_filter_ir.process(current_value_ir);

  
    stat_red.process(current_value_red);
    stat_ir.process(current_value_ir);


    float current_value = high_pass_filter.process(current_value_red);
    float current_diff = differentiator.process(current_value);


    // if(!isnan(current_diff) && !isnan(last_diff)) {
      
      if(last_diff > 0 && current_diff < 0) {
        crossed = true;
        crossed_time = millis();
      }
      
      if(current_diff > 0) {
        crossed = false;
      }
  

      // if(crossed && current_diff < kEdgeThreshold) {
      //   if(last_heartbeat != 0 && crossed_time - last_heartbeat > 300) {
          // Show Results
          int bpm = 60000/(crossed_time - last_heartbeat);
          float rred = (stat_red.maximum()-stat_red.minimum())/stat_red.average();
          float rir = (stat_ir.maximum()-stat_ir.minimum())/stat_ir.average();
          float r = rred/rir;
          float spo2 = kSpO2_A * r * r + kSpO2_B * r + kSpO2_C;
          
          // if(bpm > 50 && bpm < 250) {
            // Average?
            // if(kEnableAveraging) {
              int average_bpm = averager_bpm.process(bpm);
              int average_r = averager_r.process(r);
              int average_spo2 = averager_spo2.process(spo2);
  //           }
  //         }
  //         stat_red.reset();
  //         stat_ir.reset();
  //       }
  //       crossed = false;
  //       last_heartbeat = crossed_time;
  //     }
  //   }

  //   last_diff = current_diff;
  // }
      buttonState = digitalRead(buttonPin);
  if (gpsSerial.available()) {
    if (gps.encode(gpsSerial.read())) {

        // roll = atan2(accY, accZ) * 180.0 / PI;
        // pitch = atan2(-accX, sqrt(accY * accY + accZ * accZ)) * 180.0 / PI;
        // yaw = atan2(magY * cos(roll) - magZ * sin(roll), magX * cos(pitch) + magY * sin(roll) * sin(pitch) + magZ * cos(roll) * sin(pitch)) * 180.0 / PI;
      String longitude = String(gps.location.lng(), 6);
      String latitude = String(gps.location.lat(), 6);
      String speed = String(gps.speed.mps(),2); 
      String date = String(gps.date.day()) + "/" + String(gps.date.month()) + "/" + String(gps.date.year());
      String hour = String(gps.time.hour()) + ":" + String(gps.time.minute()) + ":" + String(gps.time.second());
      String signal = String(modem.getSignalQuality());
      String timestamp = date + " " + hour;
     // String dataString = String(roll) +  String(pitch) +  String(yaw) ;
        // Convert float values to strings
      String rollStr = String(roll, 2);
      String pitchStr = String(pitch, 2);
      String yawStr = String(yaw, 2);
      String BPM = String(average_bpm);
      String Spo2 = String(average_spo2);

      String dataString = "";
      dataString += "\"roll\": \"" + rollStr + "\", ";
      dataString += "\"pitch\": \"" + pitchStr + "\", ";
      dataString += "\"yaw\": \"" + yawStr + "\"";
      dataString += "\n";
  
      
      String payload = "{\"timestamp\": " + timestamp + ",\"longitude\": " + longitude + ", \"latitude\": " + latitude + ", \"speed\": "+ speed + ",\"dataAccel\": " + dataString + ", \"Temperature\": " + temp + ", \"FallCount\": " + fallCount + ", \"Signal_Strength\": " + signal + ", \"Heart Rate\": " + average_bpm + ", \"SpO2\": " + average_spo2 + "}";
     

     // writeFile("/gps_log.txt", payload);

  if (abs(roll - prevRoll) > 50) {
    if(millis() - lastFallTime > 60000){
    mqtt.publish(topic, payload.c_str());
    Serial.println("Fall detected!");
    fallCount++;
    Serial.print("Total falls: ");
    Serial.println(fallCount);
    lastFallTime = millis();
    }
  }
  
  prevRoll = roll;


    if(buttonState == HIGH)
    {
      mqtt.publish(topic, payload.c_str());
      Serial.println("Published: " + payload + " to topic: " + String(topic));
      //count++;
      Serial.println("Button is Pressed");
      myFile = SD.open("gps_log.csv", FILE_WRITE);
      if (myFile) {
        String logMessage = payload;
        myFile.println(logMessage);
        myFile.close();
      } else {
        Serial.println("Error opening gps_log.txt for writing.");
      }

      // writeFile("/example.csv", "Button Pressed");
      // writeFile("/example.csv", payload);
    }
  if (millis() - lastFileWriteTime >= 360000) {
    lastFileWriteTime = millis();
    readFileAndSendToServer("gps_log.csv");
    myFile = SD.open("gps_log.csv", FILE_WRITE);
    if (myFile) {
        String logMessage = payload;
        myFile.println(logMessage);
        myFile.close();
      } else {
        Serial.println("Error opening gps_log.txt for writing.");
      }   
    //delay(1000); 
    Serial.println(payload);
  }
    
//
 // delay(100);
   // }
  //}

  if (mqtt.connected()) {
    mqtt.loop();
  }
    if (!mqtt.connected()) {
     connectToMQTTBroker();
  }
}
}
}

void displayColor(int redValue, int greenValue, int blueValue) {
  analogWrite(redPin, redValue);
  analogWrite(greenPin, greenValue);
  analogWrite(bluePin, blueValue);
}

// void initMPU9250() {
//   Wire.beginTransmission(MPU9250_ADDRESS);
//   Wire.write(0x6B);
//   Wire.write(0);
//   Wire.endTransmission(true);
// }

// void readAccelData() {
//   Wire.beginTransmission(MPU9250_ADDRESS);
//   Wire.write(ACCEL_XOUT_H);
//   Wire.endTransmission(false);
//   Wire.requestFrom(MPU9250_ADDRESS, 6, true);
//   accX = (Wire.read() << 8 | Wire.read()) / 16384.0;
//   accY = (Wire.read() << 8 | Wire.read()) / 16384.0;
//   accZ = (Wire.read() << 8 | Wire.read()) / 16384.0;
// }

// void readMagData() {
//   Wire.beginTransmission(MPU9250_ADDRESS);
//   Wire.write(0x37); 
//   Wire.endTransmission(false);
//   Wire.requestFrom(MAG_ADDRESS, 6, true);
//   magX = (Wire.read() | Wire.read() << 8);
//   magY = (Wire.read() | Wire.read() << 8);
//   magZ = (Wire.read() | Wire.read() << 8);
// }

// void writeFile(const char * path, String message){
//     Serial.printf("Writing file: %s\n", path);

//     File file = SD.open(path, FILE_APPEND); 
//     if(!file){
//         Serial.println("Failed to open file for writing");
//         return;
//     }
//     if(file.println(message)){
//         Serial.println("File written");
//     } else {
//         Serial.println("Write failed");
//     }
//     file.close();
// }

void readFileAndSendToServer(const char *path) {
  Serial.printf("Reading file: %s\n", path);

  File myFile = SD.open(path);
  String csvContent = "";
  if (myFile) {
    Serial.println("Reading");

  while (myFile.available()) {
  //  Serial.println("iN FUNCTION");
    char c = myFile.read();
    //Serial.println(c);
    csvContent += c;
  }
  myFile.close();
  sendToServer(csvContent);
  } else { 
    Serial.println("Error opening file");
  }
//sendToServer(csvContent);
}

void sendToServer(String data) {
  Serial.print("Sending data to server: ");
  displayColor(255,255, 0);   
  delay(1000);
  displayColor(0,0, 0);  
 // delay(1000);
 // Serial.println(data);
 // digitalWrite(led3, LOW);
  delay(1000);
 // digitalWrite(led3, HIGH);
  int err = http.post(resource, "text/csv", data);
  if (err != 0) {
    Serial.println("Failed to connect to server");
    return;
  }

  int status = http.responseStatusCode();
  if (status != 200) {
    Serial.print("HTTP POST failed, status code: ");
    Serial.println(status);
    return;
  }

  Serial.println("HTTP POST successful");
  Serial.println(status);

  http.stop();
}

void initializeModem() {
  sendATCommand("AT");
  delay(1000);
  // sendATCommand("AT");
  // delay(1000);
  sendATCommand("ATI");
  delay(1000);
  // sendATCommand("AT+IPR=9600");
  // delay(1000);
  sendATCommand("AT");
  delay(1000);
  sendATCommand("ATI");
  delay(1000);
  sendATCommand("AT+CPIN?");
  delay(1000);
  sendATCommand("AT+CSQ");
  delay(1000);
  // sendATCommand("AT+CGDCONT=1,\"IP\",\"www\"");
  // delay(1000);
  // sendATCommand("AT+SAPBR = 1,1");
  // delay(1000);

  Serial.println("System start.");
  delay(1000);
  Serial.println("Modem: " + modem.getModemInfo());

  if (!modem.waitForNetwork()) {
    Serial.println("Network registration failed.");
//...................................For RP2040....................................


    displayColor(255,255, 0);   //RED
    //delay(1000);
    delay(60000);
    digitalWrite(3,LOW);
    while (true);
  }

  Serial.println("Signal Quality: " + String(modem.getSignalQuality()));

  Serial.println("Connecting to GPRS network.");
  if (!modem.gprsConnect(apn, user, pass)) {
    Serial.println("GPRS connection failed.");
    displayColor(255,255, 0);   //RED
    //delay(10000);
    delay(60000);
    digitalWrite(3,LOW);
    while (true);
  }
  Serial.println("Connected to GPRS: " + String(apn));
          displayColor(0, 0, 255);
     //CYAN
  delay(1000);
 // digitalWrite(led1, LOW);
}

void connectToMQTTBroker() {
  mqtt.setServer(broker, 1883);
  mqtt.setCallback(mqttCallback);
  Serial.println("Connecting to MQTT Broker: " + String(broker));
  //displayColor(0, 255, 0);  //GREEN
  delay(1000);
  while (!mqtt.connected()) {
    if (mqtt.connect("GsmClientN")) {
      Serial.println("Connected to broker.");
       displayColor(0, 255, 0);
     // digitalWrite(led1, HIGH);
     // digitalWrite(led2, LOW);
    } else {
      Serial.print("Failed to connect to broker, retrying...");
      displayColor(255,255, 0);   //RED
      delay(60000);
      digitalWrite(3,LOW);
    }
  }
}

void sendATCommand(const char* command) {
  Serial.print("Sending Command: ");
  Serial.println(command);
  SerialAT.println(command);
  delay(600);

  Serial.print("Received response: ");
  while (SerialAT.available()) {
    char c = SerialAT.read();
    Serial.print(c);
  }
  Serial.println();
}

void mqttCallback(char *topic, byte *payload, unsigned int len) {
  Serial.print("Message received: ");
  for (int i = 0; i < len; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}
